    本项目的目标是设计一个灵活高性能的轻量级本地缓存系统，解决高并发峰值流量对系统造成突发的压力问题，保证系统响应的稳定性及快速性。 

    适用场景：

        对实时、一致性要求不高，高并发访问、性能要求极高的少量数据缓存，如：热门页面、商品、新闻、峰值流量突出, cms等对实时性要求不太太高（误差在 200ms以上可以接受的）的场景，大多数非金融交易的互联网应用的都符合上述场景 

    需求背景：

        目前已知Java缓存系统在缓存失效时都未做阀值控制，一旦缓存数据在高并发下失效，请求会在瞬间穿透到后端数据源，给后端数据源造成极高的峰值压力，极大降低了系统的稳定性。而高并发下的穿透阀值控制交给应用开发人员来做，对应用人员又是一个很大的挑战，因此系统设计目标最重要的是控制穿透阀值。 

        通用缓存系统通常提供LRU、FIFO等缓存策略，但根据业务需求自定义缓存策略却是比较困难的事情，因此提供一个易于自定义缓存策略的缓存系统，是很多业务方的需求。 ehcache、JCS等都是分布式重量级别的缓存系统，虽然可以当本地缓存使用，但配置及使用也相对比较繁琐。JDK没有提供一个轻量级的缓存实现类， 用LinkedHashMap? 来实现轻量级缓存，在高并发下性能会降低，而JDK未提供ConcurrentLinkedHashMap? ，因此轻量级简便也是本系统的设计目标之一。 

    关键字：

        穿透阀值控制、扩展性（自定义缓冲策略）、灵活易用。 

    系统的优点： 

    解决cache穿透攻击的问题， 有效控制cache失效时穿透次数，

        避免cache失效时对系统造成压力，在高并发下响应相当淡定。 

    2.避免分布式系统序列化、反序列化、网络交互开销，提升系统的性能。 3.灵活轻量，扩展性好，根据需要非常容易的自定义缓存策略。 

    系统的缺点：

        不适合对数据一致性要求非常高的场景。 

        2.不是分布式缓存系统 